#!/usr/bin/env bash

HERE=$(dirname "$(readlink -f "$0")")

function createBottle(){
  # Create visual style
  echo "Copying visual style..."

  THEME_PATH="${BOTTLE_NAME}/prefix/drive_c/windows/Resources/Themes/"
  mkdir -p "${THEME_PATH}"
  cp -r "${HERE}"/kupofl ./"${THEME_PATH}"

  enterOnBottle

  # Create the prefix
  echo "Creating prefix..."

  export WINEPREFIX="${HOME}/prefix"
  "${HERE}"/wine --run 2>&1 > /dev/null
  "${HERE}"/wine regedit "${HERE}"/improve.reg 2>&1 > /dev/null

  # Disable update-timestamp
  echo "disabled" > "${BOTTLE_NAME}/prefix/.update-timestamp" 

  # Backup registry
  cp "${BOTTLE_NAME}/prefix/system.reg" "${BOTTLE_NAME}/system.reg.orig"
  cp "${BOTTLE_NAME}/prefix/user.reg" "${BOTTLE_NAME}/user.reg.orig"

  echo "Done!"
  exit 0
}

function installApp(){
  checkIfIsAnBottle 
  enterOnBottle

  # Check if file exist
  
  if [ "$1" == "" ]; then
    echo "Error: You must provide a file"
    exit 1
  elif [ ! -f "$1" ]; then
    echo "Error: File ${@} not found!"
    exit 1
  fi

  "${HERE}"/wine "${1}"
  exit ${?}
}

function run(){
  checkIfIsAnBottle 
  enterOnBottle

  # Check if file exist
  if [ "$1" == "" ]; then
    echo "Error: You must provide a file"
    return 1
  fi
  "${HERE}"/wine "${@}"
  exit ${?}
}


function runWineComponent(){
  checkIfIsAnBottle 
  enterOnBottle

  WINE_COMPONENT=$(echo ${COMMAND} | cut -c 3-);

  "${HERE}"/wine $WINE_COMPONENT ${@}
  exit ${?}
}


function checkIfIsAnBottle(){
  if [ ! -d "${BOTTLE_NAME}/prefix/" ]; then
    echo "Error: ${BOTTLE_NAME} isn't a bottler"
    exit 1
  fi
}

function enterOnBottle(){
  # Use the bottle as $HOME:
  export WINEARCH=win32
  export WINEPREFIX=$(readlink -m ${BOTTLE_NAME}/prefix)
  export HOME=$(readlink -m "${BOTTLE_NAME}")
}

function printHelp(){
  echo "  Usage:"
  echo "   ${APPIMAGE} [command] [bottle name] [options]"
  echo
  echo "  Available commands are:"
  echo
  echo "    Wine32-AppImage commands:"
  echo "      create-bottle  =>  Create a new bottle ith defaul settings"
  echo "      install        =>  Install a software from outside bottle"
  echo "      run            =>  Run a software under the bottle"
  echo
  echo "     Wine default command:"
  echo "      --winetricks   =>  Open Winetricks"
  echo "      --winecfg      =>  Open Wine configurator"
  echo "      --regedit      =>  Open Wine register editor"
  echo "      --taskmgr      =>  Open a task manager for wine apps"
  echo "      --uninstaller  =>  Open the 'Wine Uninstaller'"
  exit 1
}

COMMAND=${1}; shift
BOTTLE_NAME=$(echo ${1} | sed "s|[[:space:]]|_|g") ; shift

[ "${BOTTLE_NAME}" == "" ] && printHelp
[ "${COMMAND}"     == "" ] && printHelp

[ "${COMMAND}" == "create-bottle" ] && createBottle     ${@}
[ "${COMMAND}" == "install" ]       && installApp       ${@}
[ "${COMMAND}" == "run" ]           && run       ${@}
[ "${COMMAND}" == "--winecfg" ]     && runWineComponent ${@}
[ "${COMMAND}" == "--regedit" ]     && runWineComponent ${@}
[ "${COMMAND}" == "--taskmgr" ]     && runWineComponent ${@}
[ "${COMMAND}" == "--winetricks" ]  && runWineComponent ${@}
[ "${COMMAND}" == "--uninstaller" ] && runWineComponent ${@}

printHelp
