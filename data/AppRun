#!/usr/bin/env bash

HERE=$(dirname "$(readlink -f "$0")")

VALID_CATEGORIES=(AudioVideo Audio Video Development 
                  Education Game Graphics Network 
                  Office Science Settings System Utility)

function createBottle(){
  # Create visual style
  echo "Copying visual style..."

  THEME_PATH="${BOTTLE_NAME}/prefix/drive_c/windows/Resources/Themes/"
  mkdir -p "${THEME_PATH}"
  cp -r "${HERE}"/kupofl ./"${THEME_PATH}"

  enterOnBottle

  # Create the prefix
  echo "Creating prefix..."

  export WINEPREFIX="${HOME}/prefix"
  "${HERE}"/wine --run 2> /dev/null
  "${HERE}"/wine create-register "${HERE}"/improve.reg 2> /dev/null

  # Disable update-timestamp
  echo "disabled" > "${BOTTLE_NAME}/prefix/.update-timestamp" 

  # Create strip data
  echo -n > "${BOTTLE_NAME}/unneeded_packages"

  # Create file that warns if is to copy app files (by default no)
  echo -n "no" > "${BOTTLE_NAME}/copy_app_files"

  # Backup registry
  cp "${BOTTLE_NAME}/prefix/system.reg" "${BOTTLE_NAME}/system.reg.orig"
  cp "${BOTTLE_NAME}/prefix/user.reg" "${BOTTLE_NAME}/user.reg.orig"
  
  # Register AppName
  echo -n ${APP_NAME} > "${BOTTLE_NAME}/app_name"

  echo "Done!"
  exit 0
}

function installApp(){
  checkIfIsAnBottle 
  enterOnBottle

  # Check if file exist
  if [ "$1" == "" ]; then
    echo "Error: You must provide a file"
    exit 1
  elif [ ! -f "$1" ]; then
    echo "Error: File ${@} not found!"
    exit 1
  fi

  "${HERE}"/wine "${1}" "${2}"
  exit ${?}
}

function run(){
  checkIfIsAnBottle 
  enterOnBottle

  # Check if file exist
  if [ "$1" == "" ]; then
    echo "Error: You must provide a file"
    return 1
  fi
  "${HERE}"/wine "${@}"
  exit ${?}
}


function runWineComponent(){
  checkIfIsAnBottle 
  enterOnBottle

  WINE_COMPONENT=$(echo ${COMMAND} | cut -c 3-);

  "${HERE}"/wine $WINE_COMPONENT ${*} 2> /dev/null
  exit ${?}
}


function checkIfIsAnBottle(){
  if [ ! -d "${BOTTLE_NAME}/prefix/" ]; then
    echo "Error: ${BOTTLE_NAME} isn't a bottler"
    exit 1
  fi
}

function enterOnBottle(){
  # Use the bottle as $HOME:
  export WINEARCH=win32
  export WINEPREFIX=$(readlink -m ${BOTTLE_NAME}/prefix)
  export HOME=$(readlink -m "${BOTTLE_NAME}")
}

function printHelp(){
  echo "  Usage:"
  echo "   ${APPIMAGE} [command] [bottle name] [value]"
  echo
  echo "  Available commands are:"
  echo
  echo "    Wine32-AppImage commands:"
  echo "      create-bottle    =>  Create a new bottle with default settings"
  echo "      install          =>  Install a software from outside bottle"
  echo "      package          =>  Package the bottle as AppImage"
  echo "      run              =>  Run a software already on the bottle"
  echo
  echo "    Flags to modify behavior of Wine launcher:"
  echo "      -copy-app-files  =>  Defines if app files will extracted of AppImage"
  echo
  echo "     Wine default command:"
  echo "      --winetricks     =>  Open Winetricks"
  echo "      --winecfg        =>  Open Wine configurator"
  echo "      --regedit        =>  Open Wine register editor"
  echo "      --taskmgr        =>  Open a task manager for wine apps"
  echo "      --uninstaller    =>  Open the 'Wine Uninstaller'"
  echo
  echo "  Note: Flags accepts only 'yes' or 'no' as value"
  exit 1
}

function printPackageUsage(){
  echo -ne "  ${1}"
  echo -e "  You must provide 3 arguments for package flag:\n"
  echo -e "    [Executable path] [category] [icon path]\n"

  echo -e "  [Executable path] can be in one of these forms:\n"
  echo -e "    * ${HOME}/prefix/drive_c/path/to/file.exe"
  echo -e "    * C:/path/to/file.exe"
  echo -e "    * C:\\\path\\\to\\\file.exe\n"
  echo -e "  [category] is where application will be placed on 'Menu' of system,"
  echo -e "  is similar do Windows Start Menu but is separated by categories."
  echo -e "  The valid categories is:"
  echo " ${VALID_CATEGORIES[*]}" | sed "s| |\n    * |g"
  echo -e "\n  [icon path] is the path of icon for application is called outside bottle."
  echo -e "  icon must be in PNG format and is recommended a 256x256px for resolution"
  echo -e "    * /full/path/to/icon.png"
  echo -e "    * path/in/current/dir/icon.png"
  exit 1
}

function package(){
  checkIfIsAnBottle
  enterOnBottle

  cd ${BOTTLE_NAME}

  # Check passed argurments
 [ -z "${1}" ] && printPackageUsage "Error: Wrong number of arguments\n"
 [ -z "${2}" ] && printPackageUsage "Error: Wrong number of arguments\n"
 [ -z "${3}" ] && printPackageUsage "Error: Wrong number of arguments\n"


  # Check Exec
  PREFIX=$(echo "${HOME}/prefix/drive_c")
  EXEC=$(echo ${1} | sed "s|${PREFIX}|C:|g" | sed "s|\\\|/|g")
  FILE=$(echo ${EXEC} | sed "s|C:|${PREFIX}|g")

  if [ ! -f "$FILE" ]; then
    echo -e "Error: Executable ${FILE} not found!"
    exit 1
  fi

  # Check categories
  VALID_CATEGORIES=(AudioVideo Audio Video Development 
                    Education Game Graphics Network 
                    Office Science Settings System Utility)

  CATEGORY=$(echo " ${VALID_CATEGORIES[*]} " | grep -o " ${2} " | sed 's/ //g')
  if [ "${CATEGORY}" == "" ]; then
    echo -e "Error: You must provide a valid category!"
    echo -e "A list of valid categories is shown below:"
    echo " ${VALID_CATEGORIES[*]}" | sed "s| |\n * |g"
    echo -e "\nYou can find an detailed explanation on following link:"
    echo "https://specifications.freedesktop.org/menu-spec/latest/apa.html"
    echo -e "\nYou was passed: ${2}"
    exit 1
  fi

  # Check icon
  ICON="${3}"
  if [ ! -f "$ICON" ]; then
    echo -e "Error: Icon file ${ICON} not found!"
    exit 1
  fi

  # Copy icon
  cp "$ICON" "${BOTTLE_NAME}.png"
  ln -s "${BOTTLE_NAME}.png" ".DirIcon"

  # Write Launcher
  echo "[Desktop Entry]"          >  "${BOTTLE_NAME}.desktop"
  echo "Name=$(cat app_name)"     >> "${BOTTLE_NAME}.desktop"
  echo "Type=Application"         >> "${BOTTLE_NAME}.desktop"
  echo "Categories=${CATEGORY};"  >> "${BOTTLE_NAME}.desktop"
  echo "Icon=${BOTTLE_NAME}"      >> "${BOTTLE_NAME}.desktop"
  echo "Exec=wine %f"             >> "${BOTTLE_NAME}.desktop"
  echo "X-WineExec=\"${EXEC}\""   >> "${BOTTLE_NAME}.desktop"
  
  # Copy AppImage resources
  echo "Copying Wine32-AppImage..."
  cp -r "${HERE}/"* .
  
  # Strip unneeded files
  echo "Removing unneeded files..."
  ./strip $(cat unneeded_packages| sed 's/^/--purge-/g')

  echo "Getting differential entries on regedit..."
  
  SYSTEM=$(diff "./app/prefix/system.reg" "./system.reg.orig"  | \
                                                    grep ^"<"  | \
                                             grep -v "#time="  | \
                                                          rev  | \
                               sed '/^[0-9]\{10\}/ s/ /#   /'  | \
                                                          rev  | \
                                                    cut -c 3-  | \
                                                  head -n -44  | \
                       sed 's/^\[S/\[HKEY_LOCAL_MACHINE\\S/g'  | \
                                      sed '/^\[/ s|\\\\|\\|g'  | \
                 sed "/\"InstallDate\"/c\{Install date here}"  )
                  
  echo "${SYSTEM}" >> ./improve.reg
  echo "" >> ./improve.reg
  
  rm -rf "./app/prefix"
  rm -rf "./user.reg.orig"
  rm -rf "./system.reg.orig"
  rm -rf "./strip"
  rm -rf "./AppRun"
  mv "WineLauncher" "AppRun"

  exit 0
}

function strip(){
  echo " ${@} " | sed 's/ /\n/g' >> "${BOTTLE_NAME}/unneeded_packages"
  STRIP=$(cat "${BOTTLE_NAME}/unneeded_packages" | sort | uniq | sed '/^$/d')
  echo -n "${STRIP}" > "${BOTTLE_NAME}/unneeded_packages"
  exit 0
}

function noStrip(){
  STRIP=$(cat "${BOTTLE_NAME}/unneeded_packages")
  for var in "${@}";do
    STRIP=$(echo -n "${STRIP}" | grep -v "${var}")
  done
  echo -n "${STRIP}" > "${BOTTLE_NAME}/unneeded_packages"
  exit 0
}

function setFlag(){
  checkIfIsAnBottle 
  enterOnBottle
  FILE=$(echo ${COMMAND} | cut -c 2- | sed 's/-/_/g')
  VALID_OPTIONS=("yes" "no")

  if [[ " ${VALID_OPTIONS[@]} " =~ " ${1} " ]]; then
    echo -n "${1}" > "${BOTTLE_NAME}/${FILE}"
    exit 0
  fi

  echo -e "  Error: Invalid value passed flags accepts only 'yes' and 'no'\n"
  echo -e "    To activate ${COMMAND} use:"
  echo -e "      ... ${COMMAND} yes"
  echo -e "    To deactivate ${COMMAND} use:"
  echo -e "      ... ${COMMAND} no"
  exit 1
}

COMMAND="${1}"; shift
APP_NAME="${1}"
BOTTLE_NAME=$(echo ${1} | sed "s|[[:space:]]|_|g") ; shift

[ "${BOTTLE_NAME}" == "" ] && printHelp
[ "${COMMAND}"     == "" ] && printHelp

[ "${COMMAND}" == "create-bottle" ]   && createBottle     ${@}
[ "${COMMAND}" == "install" ]         && installApp       ${@}
[ "${COMMAND}" == "package" ]         && package          "${1}" "${2}" "${3}"
[ "${COMMAND}" == "run" ]             && run              ${@}
[ "${COMMAND}" == "-copy-app-files" ] && setFlag          ${@}
[ "${COMMAND}" == "--strip" ]         && strip            ${@}
[ "${COMMAND}" == "--no-strip" ]      && noStrip          ${@}
[ "${COMMAND}" == "--winecfg" ]       && runWineComponent ${@}
[ "${COMMAND}" == "--regedit" ]       && runWineComponent ${@}
[ "${COMMAND}" == "--taskmgr" ]       && runWineComponent ${@}
[ "${COMMAND}" == "--winetricks" ]    && runWineComponent ${@}
[ "${COMMAND}" == "--uninstaller" ]   && runWineComponent ${@}

printHelp
